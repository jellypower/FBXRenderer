// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: SSPbrMaterialData.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "SSVector.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cf4b42768efce6ad);

}  // namespace schemas
}  // namespace capnp


struct SSPbrMaterialSrl {
  SSPbrMaterialSrl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf4b42768efce6ad, 1, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SSPbrMaterialSrl::Reader {
public:
  typedef SSPbrMaterialSrl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasShaderName() const;
  inline  ::capnp::Text::Reader getShaderName() const;

  inline bool hasTxDiffuseName() const;
  inline  ::capnp::Text::Reader getTxDiffuseName() const;

  inline bool hasTxMetallicName() const;
  inline  ::capnp::Text::Reader getTxMetallicName() const;

  inline bool hasTxNormalName() const;
  inline  ::capnp::Text::Reader getTxNormalName() const;

  inline bool hasTxEmissiveName() const;
  inline  ::capnp::Text::Reader getTxEmissiveName() const;

  inline bool hasBaseColorFactor() const;
  inline  ::Vector4fSrl::Reader getBaseColorFactor() const;

  inline bool hasEmissiveFactor() const;
  inline  ::Vector4fSrl::Reader getEmissiveFactor() const;

  inline float getNormalTextureScale() const;

  inline bool hasMetallicRoughnessFactor() const;
  inline  ::Vector2fSrl::Reader getMetallicRoughnessFactor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SSPbrMaterialSrl::Builder {
public:
  typedef SSPbrMaterialSrl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasShaderName();
  inline  ::capnp::Text::Builder getShaderName();
  inline void setShaderName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initShaderName(unsigned int size);
  inline void adoptShaderName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownShaderName();

  inline bool hasTxDiffuseName();
  inline  ::capnp::Text::Builder getTxDiffuseName();
  inline void setTxDiffuseName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTxDiffuseName(unsigned int size);
  inline void adoptTxDiffuseName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTxDiffuseName();

  inline bool hasTxMetallicName();
  inline  ::capnp::Text::Builder getTxMetallicName();
  inline void setTxMetallicName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTxMetallicName(unsigned int size);
  inline void adoptTxMetallicName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTxMetallicName();

  inline bool hasTxNormalName();
  inline  ::capnp::Text::Builder getTxNormalName();
  inline void setTxNormalName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTxNormalName(unsigned int size);
  inline void adoptTxNormalName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTxNormalName();

  inline bool hasTxEmissiveName();
  inline  ::capnp::Text::Builder getTxEmissiveName();
  inline void setTxEmissiveName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTxEmissiveName(unsigned int size);
  inline void adoptTxEmissiveName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTxEmissiveName();

  inline bool hasBaseColorFactor();
  inline  ::Vector4fSrl::Builder getBaseColorFactor();
  inline void setBaseColorFactor( ::Vector4fSrl::Reader value);
  inline  ::Vector4fSrl::Builder initBaseColorFactor();
  inline void adoptBaseColorFactor(::capnp::Orphan< ::Vector4fSrl>&& value);
  inline ::capnp::Orphan< ::Vector4fSrl> disownBaseColorFactor();

  inline bool hasEmissiveFactor();
  inline  ::Vector4fSrl::Builder getEmissiveFactor();
  inline void setEmissiveFactor( ::Vector4fSrl::Reader value);
  inline  ::Vector4fSrl::Builder initEmissiveFactor();
  inline void adoptEmissiveFactor(::capnp::Orphan< ::Vector4fSrl>&& value);
  inline ::capnp::Orphan< ::Vector4fSrl> disownEmissiveFactor();

  inline float getNormalTextureScale();
  inline void setNormalTextureScale(float value);

  inline bool hasMetallicRoughnessFactor();
  inline  ::Vector2fSrl::Builder getMetallicRoughnessFactor();
  inline void setMetallicRoughnessFactor( ::Vector2fSrl::Reader value);
  inline  ::Vector2fSrl::Builder initMetallicRoughnessFactor();
  inline void adoptMetallicRoughnessFactor(::capnp::Orphan< ::Vector2fSrl>&& value);
  inline ::capnp::Orphan< ::Vector2fSrl> disownMetallicRoughnessFactor();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SSPbrMaterialSrl::Pipeline {
public:
  typedef SSPbrMaterialSrl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Vector4fSrl::Pipeline getBaseColorFactor();
  inline  ::Vector4fSrl::Pipeline getEmissiveFactor();
  inline  ::Vector2fSrl::Pipeline getMetallicRoughnessFactor();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool SSPbrMaterialSrl::Reader::hasShaderName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SSPbrMaterialSrl::Builder::hasShaderName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SSPbrMaterialSrl::Reader::getShaderName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::getShaderName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SSPbrMaterialSrl::Builder::setShaderName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::initShaderName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SSPbrMaterialSrl::Builder::adoptShaderName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SSPbrMaterialSrl::Builder::disownShaderName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SSPbrMaterialSrl::Reader::hasTxDiffuseName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SSPbrMaterialSrl::Builder::hasTxDiffuseName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SSPbrMaterialSrl::Reader::getTxDiffuseName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::getTxDiffuseName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SSPbrMaterialSrl::Builder::setTxDiffuseName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::initTxDiffuseName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SSPbrMaterialSrl::Builder::adoptTxDiffuseName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SSPbrMaterialSrl::Builder::disownTxDiffuseName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SSPbrMaterialSrl::Reader::hasTxMetallicName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SSPbrMaterialSrl::Builder::hasTxMetallicName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SSPbrMaterialSrl::Reader::getTxMetallicName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::getTxMetallicName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SSPbrMaterialSrl::Builder::setTxMetallicName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::initTxMetallicName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SSPbrMaterialSrl::Builder::adoptTxMetallicName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SSPbrMaterialSrl::Builder::disownTxMetallicName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SSPbrMaterialSrl::Reader::hasTxNormalName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SSPbrMaterialSrl::Builder::hasTxNormalName() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SSPbrMaterialSrl::Reader::getTxNormalName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::getTxNormalName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SSPbrMaterialSrl::Builder::setTxNormalName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::initTxNormalName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void SSPbrMaterialSrl::Builder::adoptTxNormalName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SSPbrMaterialSrl::Builder::disownTxNormalName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SSPbrMaterialSrl::Reader::hasTxEmissiveName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SSPbrMaterialSrl::Builder::hasTxEmissiveName() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SSPbrMaterialSrl::Reader::getTxEmissiveName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::getTxEmissiveName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SSPbrMaterialSrl::Builder::setTxEmissiveName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SSPbrMaterialSrl::Builder::initTxEmissiveName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void SSPbrMaterialSrl::Builder::adoptTxEmissiveName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SSPbrMaterialSrl::Builder::disownTxEmissiveName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool SSPbrMaterialSrl::Reader::hasBaseColorFactor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool SSPbrMaterialSrl::Builder::hasBaseColorFactor() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::Vector4fSrl::Reader SSPbrMaterialSrl::Reader::getBaseColorFactor() const {
  return ::capnp::_::PointerHelpers< ::Vector4fSrl>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::Vector4fSrl::Builder SSPbrMaterialSrl::Builder::getBaseColorFactor() {
  return ::capnp::_::PointerHelpers< ::Vector4fSrl>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Vector4fSrl::Pipeline SSPbrMaterialSrl::Pipeline::getBaseColorFactor() {
  return  ::Vector4fSrl::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void SSPbrMaterialSrl::Builder::setBaseColorFactor( ::Vector4fSrl::Reader value) {
  ::capnp::_::PointerHelpers< ::Vector4fSrl>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::Vector4fSrl::Builder SSPbrMaterialSrl::Builder::initBaseColorFactor() {
  return ::capnp::_::PointerHelpers< ::Vector4fSrl>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void SSPbrMaterialSrl::Builder::adoptBaseColorFactor(
    ::capnp::Orphan< ::Vector4fSrl>&& value) {
  ::capnp::_::PointerHelpers< ::Vector4fSrl>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Vector4fSrl> SSPbrMaterialSrl::Builder::disownBaseColorFactor() {
  return ::capnp::_::PointerHelpers< ::Vector4fSrl>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool SSPbrMaterialSrl::Reader::hasEmissiveFactor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool SSPbrMaterialSrl::Builder::hasEmissiveFactor() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::Vector4fSrl::Reader SSPbrMaterialSrl::Reader::getEmissiveFactor() const {
  return ::capnp::_::PointerHelpers< ::Vector4fSrl>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::Vector4fSrl::Builder SSPbrMaterialSrl::Builder::getEmissiveFactor() {
  return ::capnp::_::PointerHelpers< ::Vector4fSrl>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Vector4fSrl::Pipeline SSPbrMaterialSrl::Pipeline::getEmissiveFactor() {
  return  ::Vector4fSrl::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void SSPbrMaterialSrl::Builder::setEmissiveFactor( ::Vector4fSrl::Reader value) {
  ::capnp::_::PointerHelpers< ::Vector4fSrl>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::Vector4fSrl::Builder SSPbrMaterialSrl::Builder::initEmissiveFactor() {
  return ::capnp::_::PointerHelpers< ::Vector4fSrl>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void SSPbrMaterialSrl::Builder::adoptEmissiveFactor(
    ::capnp::Orphan< ::Vector4fSrl>&& value) {
  ::capnp::_::PointerHelpers< ::Vector4fSrl>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Vector4fSrl> SSPbrMaterialSrl::Builder::disownEmissiveFactor() {
  return ::capnp::_::PointerHelpers< ::Vector4fSrl>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline float SSPbrMaterialSrl::Reader::getNormalTextureScale() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float SSPbrMaterialSrl::Builder::getNormalTextureScale() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SSPbrMaterialSrl::Builder::setNormalTextureScale(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SSPbrMaterialSrl::Reader::hasMetallicRoughnessFactor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool SSPbrMaterialSrl::Builder::hasMetallicRoughnessFactor() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::Vector2fSrl::Reader SSPbrMaterialSrl::Reader::getMetallicRoughnessFactor() const {
  return ::capnp::_::PointerHelpers< ::Vector2fSrl>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::Vector2fSrl::Builder SSPbrMaterialSrl::Builder::getMetallicRoughnessFactor() {
  return ::capnp::_::PointerHelpers< ::Vector2fSrl>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Vector2fSrl::Pipeline SSPbrMaterialSrl::Pipeline::getMetallicRoughnessFactor() {
  return  ::Vector2fSrl::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void SSPbrMaterialSrl::Builder::setMetallicRoughnessFactor( ::Vector2fSrl::Reader value) {
  ::capnp::_::PointerHelpers< ::Vector2fSrl>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::Vector2fSrl::Builder SSPbrMaterialSrl::Builder::initMetallicRoughnessFactor() {
  return ::capnp::_::PointerHelpers< ::Vector2fSrl>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void SSPbrMaterialSrl::Builder::adoptMetallicRoughnessFactor(
    ::capnp::Orphan< ::Vector2fSrl>&& value) {
  ::capnp::_::PointerHelpers< ::Vector2fSrl>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Vector2fSrl> SSPbrMaterialSrl::Builder::disownMetallicRoughnessFactor() {
  return ::capnp::_::PointerHelpers< ::Vector2fSrl>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

