// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: SSTextureAssetManagingList.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fc2656a36db4b530);
CAPNP_DECLARE_SCHEMA(e6b0590c1c12db03);

}  // namespace schemas
}  // namespace capnp


struct SSTextureAssetManagingList {
  SSTextureAssetManagingList() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct TextureAssetPair;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc2656a36db4b530, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SSTextureAssetManagingList::TextureAssetPair {
  TextureAssetPair() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e6b0590c1c12db03, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SSTextureAssetManagingList::Reader {
public:
  typedef SSTextureAssetManagingList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTextureList() const;
  inline  ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>::Reader getTextureList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SSTextureAssetManagingList::Builder {
public:
  typedef SSTextureAssetManagingList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTextureList();
  inline  ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>::Builder getTextureList();
  inline void setTextureList( ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>::Builder initTextureList(unsigned int size);
  inline void adoptTextureList(::capnp::Orphan< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>> disownTextureList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SSTextureAssetManagingList::Pipeline {
public:
  typedef SSTextureAssetManagingList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SSTextureAssetManagingList::TextureAssetPair::Reader {
public:
  typedef TextureAssetPair Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTextureName() const;
  inline  ::capnp::Text::Reader getTextureName() const;

  inline bool hasTexturePath() const;
  inline  ::capnp::Text::Reader getTexturePath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SSTextureAssetManagingList::TextureAssetPair::Builder {
public:
  typedef TextureAssetPair Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTextureName();
  inline  ::capnp::Text::Builder getTextureName();
  inline void setTextureName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTextureName(unsigned int size);
  inline void adoptTextureName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTextureName();

  inline bool hasTexturePath();
  inline  ::capnp::Text::Builder getTexturePath();
  inline void setTexturePath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTexturePath(unsigned int size);
  inline void adoptTexturePath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTexturePath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SSTextureAssetManagingList::TextureAssetPair::Pipeline {
public:
  typedef TextureAssetPair Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool SSTextureAssetManagingList::Reader::hasTextureList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SSTextureAssetManagingList::Builder::hasTextureList() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>::Reader SSTextureAssetManagingList::Reader::getTextureList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>::Builder SSTextureAssetManagingList::Builder::getTextureList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SSTextureAssetManagingList::Builder::setTextureList( ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>::Builder SSTextureAssetManagingList::Builder::initTextureList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SSTextureAssetManagingList::Builder::adoptTextureList(
    ::capnp::Orphan< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>> SSTextureAssetManagingList::Builder::disownTextureList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SSTextureAssetManagingList::TextureAssetPair,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SSTextureAssetManagingList::TextureAssetPair::Reader::hasTextureName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SSTextureAssetManagingList::TextureAssetPair::Builder::hasTextureName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SSTextureAssetManagingList::TextureAssetPair::Reader::getTextureName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SSTextureAssetManagingList::TextureAssetPair::Builder::getTextureName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SSTextureAssetManagingList::TextureAssetPair::Builder::setTextureName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SSTextureAssetManagingList::TextureAssetPair::Builder::initTextureName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SSTextureAssetManagingList::TextureAssetPair::Builder::adoptTextureName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SSTextureAssetManagingList::TextureAssetPair::Builder::disownTextureName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SSTextureAssetManagingList::TextureAssetPair::Reader::hasTexturePath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SSTextureAssetManagingList::TextureAssetPair::Builder::hasTexturePath() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SSTextureAssetManagingList::TextureAssetPair::Reader::getTexturePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SSTextureAssetManagingList::TextureAssetPair::Builder::getTexturePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SSTextureAssetManagingList::TextureAssetPair::Builder::setTexturePath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SSTextureAssetManagingList::TextureAssetPair::Builder::initTexturePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SSTextureAssetManagingList::TextureAssetPair::Builder::adoptTexturePath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SSTextureAssetManagingList::TextureAssetPair::Builder::disownTexturePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

